import socket
import argparse

def ARGUMENTS():
    parser = argparse.ArgumentParser(description="""
««Sub-Domain Bruteforce»»

deafult:
ip_protocol = ipv4
network_protocol = TCP""",
    formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("-t", "--target", required=True, help="specify the target domain")
    parser.add_argument("-p", "--port", type=int, help="specify the target port")
    parser.add_argument("-w", "--wordlist", required=True, help="specify the wordlist path")
    args = parser.parse_args()
    return args

def main():
    args = ARGUMENTS()
    if args.port:
        port = args.port
    else:
        port = None
    with open(args.wordlist, 'r') as file:
        wordlist = file.read()
        wordlist = wordlist.split('\n')
    for subdomain in wordlist:
        domain = subdomain +"."+args.target
        try:
            dados = socket.getaddrinfo(domain, port, socket.AF_INET)
            print(f'{dados}\n')
            ip_data = dados[0]
            ip_data = ip_data[4]
            ip_data = ip_data[0]
            print(f"Domain: {domain}\tIP: {ip_data}\t IP-Protcol: ivp4\n")
            try:
                dados = socket.getaddrinfo(domain, port, socket.AF_INET6)
                print(f'{dados}\n')
                ip_data = dados[0]
                ip_data = ip_data[4]
                ip_data = ip_data[0]
                print(f"Domain: {domain}\tIP: {ip_data}\t IP-Protcol: ivp6\n")
            except Exception as error:
                pass
        except Exception as error:
            pass
if __name__ == '__main__':main();
