#!/bin/python3
import argparse
import sys
import json
import requests
import os
import socket
from parse_proxychains import ParseProxy

class DuduIP:
	def __init__(self):
		self.PP = ParseProxy()
		pass

	def get_dominio(self,ip):
		try:
			host = socket.gethostbyaddr(ip)
			return host[0]
		except socket.herror:
			return None
		except OSError as e:
			print(f"Erro ao resolver IP {ip}: {e}")
			return None

	def info_by_file(self, args):
		string_ips=''
		infop=''
		new_file = args.file.split('.com')[0]
		new_file = new_file.split('targets/')[1]
		path_output=f'output/{new_file}'
		with open(path_output,'w')as file:
			actions, ips, ports, status = self.PP.parse_proxy(args)
			for ip in ips:
				if not ip.strip():
					continue
				info = self.info_by_ip(ip)
				dominio = self.get_dominio(ip)
				if dominio is None:
					print(f"dominio not found for ip: {ip}")
					pass
				if args.orgs:
					org = info["org"]
					ip_atual = info["query"]
					print(f'org: {org},\tip: {ip_atual}\tas')
				infop = json.dumps(info)
				infop = infop.replace(",","\n")
				if args.verbose:
					print(f'\ndominio: {dominio}\ninformações do {ip}:\n{infop}\n')
				file.write(f'\ndominio: {dominio}\ninformações do {ip}:\n{infop}\n')
			print(infop)
			return infop if infop else "Nenhuma informação processada."

	def info_by_ip(self, ip):
		url = 'http://ip-api.com/json/' + ip
		response = requests.get(url)
		data = response.json()
		return data

	def main(self):
		parser = argparse.ArgumentParser(description="Resolução de IPs e Geolocalização.")
		parser.add_argument('-t', '--target', help="IP à ser resolvido.", type=str)
		parser.add_argument('-f', '--file', help="lista de IPs à ser resolvido.", type=str)
		parser.add_argument('-l', '--localization', help="Arquivo contendo uma lista de URLs.", action='store_true')
		parser.add_argument('-v', '--verbose', help="active the verbose mode", action='store_true')
		parser.add_argument('-o', '--orgs', help="show the orgs by ip", action='store_true')
		parser.add_argument('-d', '--domain', help="show the ", action='store_true')
		args = parser.parse_args()
		PP = ParseProxy()

		if args.target:
			ip = args.target
			info = self.info_by_ip(ip)
			infop = json.dumps(info)
			infop = infop.replace(",","\n")
			print(infop)
			return infop

		if args.file:
			info_string = self.info_by_file(args)
			return info_string

		if args.localization:
			try :
				browser = "microsoft-edge"
				comand = f'{browser} https://www.google.com/search?q=google+maps+{info["lat"]}%2C+{info["lon"]}'
				result = os.system(comand)
				if result != 0:
					raise Exception(browser)
			except Exception as error:
				try:
					print(f'Browser not found: {error}')
					browser = "firefox"
					comand = f'{browser} https://www.google.com/search?q=google+maps+{info["lat"]}%2C+{info["lon"]}'
					result = os.system(comand)
					if result != 0:
						raise Exception(browser)
				except Exception as error:
					print(f'Browser not found: {error}\ntá foda')

		return infop

if __name__ == '__main__':
	dip = DuduIP()
	dip.main()
